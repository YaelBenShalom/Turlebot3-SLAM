#!/usr/bin/env python3
""" This node is designed to navigate through a series of random waypoints in a given rectangular space

    Subscribers: "map" (nav_msgs/OccupancyGrid)
    Opens a SimpleActionClient of the move_base node
"""
import rospy
import actionlib
import numpy as np
from actionlib_msgs.msg import GoalStatus
from move_base_msgs.msg import MoveBaseFeedback, MoveBaseGoal, MoveBaseAction
from nav_msgs.msg import OccupancyGrid
from geometry_msgs.msg import Pose, Point, Quaternion
import random
import time

class Explore:

    def __init__(self):
        """ Initialize environment
        """
        self.rate = rospy.Rate(1)

        # Simple Action Client:
        self.move_base = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        self.move_base.wait_for_server()
        rospy.logdebug("move_base is ready") 

        # Initialize subscribers:
        self.map = OccupancyGrid()
        self.sub_map = rospy.Subscriber('/map', OccupancyGrid, self.map_callback)
        self.count = 0
        time.sleep(8)

        # Start the robot moving toward the goal
        self.move()


    def map_callback(self, msg):
        """ Callback function for map subscriber.
        Subscribes to /map to get the OccupancyGrid of the map.
        """
        self.map_origin_x = msg.info.origin.position.x
        self.map_origin_y = msg.info.origin.position.y
        rospy.logdebug(f"map_origin: {self.map_origin_x, self.map_origin_y}")

    
    def set_goal(self):
        """ Set random goal position for move_base.
        """
        rospy.logdebug("Setting goal")

        # Create goal:
        goal = MoveBaseGoal()

        # Set random goal:
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose.position.x = random.uniform(self.map_origin_x + 1.0, self.map_origin_x + 3.0)
        goal.target_pose.pose.position.y = random.uniform(self.map_origin_y + 1.0, self.map_origin_y + 3.0)
        goal.target_pose.pose.orientation.w = 1.0
        rospy.logdebug(f"goal: {goal.target_pose.pose.position.x, goal.target_pose.pose.position.y}")

        return goal


    def move(self):
        """ Set random goal position for move_base.
        """
        while not rospy.is_shutdown():
            self.count += 1
            rospy.logdebug(f"Start moving to point {self.count}")

            # Set random goal:
            goal = self.set_goal()

            # Move to the goal and wait 
            self.move_base.send_goal(goal)
            rospy.logdebug("Finish setting goal")

            finished_within_time = self.move_base.wait_for_result(rospy.Duration(30))
            rospy.logdebug(f"Finish moving to point {self.count}")

            # If we don't get there in time, abort the goal
            if (not finished_within_time):
                self.move_base.cancel_goal()
                rospy.logdebug("Timed out achieving goal")

            else:
                state = self.move_base.get_state()
                if state == GoalStatus.SUCCEEDED:
                    rospy.logdebug("Goal succeeded!")

                
def main():
    """ The main() function """
    rospy.init_node('explore', log_level=rospy.DEBUG)
    Explore()
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except:
        rospy.ROSInterruptException